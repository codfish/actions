name: setup-node-and-install

description:
  Sets up Node.js environment and installs dependencies with automatic package manager detection (npm/pnpm/yarn),
  intelligent caching, and version detection via input, .node-version, .nvmrc, or package.json volta.node

inputs:
  node-version:
    description:
      'Node.js version to install (e.g. "24", "lts/*"). Precedence: node-version input > .node-version > .nvmrc >
      package.json volta.node.'
    required: false
  install-options:
    description: Extra command-line options to pass to npm/pnpm/yarn install.
    default: ''
  working-directory:
    description: Directory containing package.json and lockfile.
    default: .

outputs:
  cache-hit:
    description: Whether the dependency cache was hit (true/false).
    value: "${{ steps.setup-node.outputs.cache-hit == 'true' && 'true' || 'false' }}"

runs:
  using: composite

  steps:
    - name: Validate environment and detect package manager
      id: detect-package-manager
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        # Validate package.json exists
        if [ ! -f "./package.json" ]; then
          echo "‚ùå ERROR: package.json not found in '${{ inputs.working-directory }}'"
          echo "Make sure the working-directory contains a valid Node.js project"
          exit 1
        fi

        # Detect package manager based on lockfiles (including yarn)
        if [ -f "./pnpm-lock.yaml" ]; then
          echo "package-manager=pnpm" >> $GITHUB_OUTPUT
          echo "lockfile-exists=true" >> $GITHUB_OUTPUT
          echo "lockfile-path=pnpm-lock.yaml" >> $GITHUB_OUTPUT
          echo "üì¶ Detected package manager: pnpm"
        elif [ -f "./yarn.lock" ]; then
          echo "package-manager=yarn" >> $GITHUB_OUTPUT
          echo "lockfile-exists=true" >> $GITHUB_OUTPUT
          echo "lockfile-path=yarn.lock" >> $GITHUB_OUTPUT
          echo "üì¶ Detected package manager: yarn"
        elif [ -f "./package-lock.json" ]; then
          echo "package-manager=npm" >> $GITHUB_OUTPUT
          echo "lockfile-exists=true" >> $GITHUB_OUTPUT
          echo "lockfile-path=package-lock.json" >> $GITHUB_OUTPUT
          echo "üì¶ Detected package manager: npm"
        else
          echo "package-manager=npm" >> $GITHUB_OUTPUT
          echo "lockfile-exists=false" >> $GITHUB_OUTPUT
          echo "lockfile-path=" >> $GITHUB_OUTPUT
          echo "üì¶ No lockfile found, defaulting to: npm"
        fi

    - name: Install pnpm
      if: steps.detect-package-manager.outputs.package-manager == 'pnpm'
      uses: pnpm/action-setup@v4
      with:
        run_install: false

    # Detect Node.js version to use (input > .node-version > .nvmrc > package.json volta.node)
    - name: Detect node version
      id: detect-node-version
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        resolved_version=""

        if [ -n "${INPUT_NODE_VERSION}" ]; then
          resolved_version="$INPUT_NODE_VERSION"
          echo "üìã Using Node version from input: $resolved_version"
        elif [ -f "./.node-version" ]; then
          file_version=$(cat ./.node-version | tr -d '\n\r' | xargs)
          if [ -n "$file_version" ]; then
            resolved_version="$file_version"
            echo "üìã Using Node version from .node-version: $resolved_version"
          fi
        fi

        if [ -z "$resolved_version" ] && [ -f "./.nvmrc" ]; then
          nvmrc_version=$(cat ./.nvmrc | tr -d '\n\r' | xargs)
          if [ -n "$nvmrc_version" ]; then
            resolved_version="$nvmrc_version"
            echo "üìã Using Node version from .nvmrc: $resolved_version"
          fi
        fi

        if [ -z "$resolved_version" ]; then
          volta_node=$(jq -r '.volta.node // empty' package.json 2>/dev/null || true)
          if [ -n "$volta_node" ]; then
            resolved_version="$volta_node"
            echo "üìã Using Node version from package.json volta.node: $resolved_version"
          fi
        fi

        echo "version=$resolved_version" >> $GITHUB_OUTPUT
      env:
        INPUT_NODE_VERSION: ${{ inputs.node-version }}

    - name: Setup Node.js
      uses: actions/setup-node@v5
      id: setup-node
      with:
        # use detected package manager cache
        cache: ${{ steps.detect-package-manager.outputs.package-manager }}
        cache-dependency-path: ${{ inputs.working-directory }}
        node-version: ${{ steps.detect-node-version.outputs.version }}
        registry-url: 'https://registry.npmjs.org'

    # apply `./node_modules` cache only if a lockfile is present
    # Will remove the need to run install commands twice. Risk reduced by using a very specific cache key.
    # Cache wont be used if the lockfile changes, package manager, node version, or OS changes.
    - name: Setup node_modules dependency cache
      if: steps.detect-package-manager.outputs.lockfile-exists == 'true'
      uses: actions/cache@v4
      id: cache
      with:
        path: ${{ inputs.working-directory }}/node_modules
        key:
          ${{ runner.os }}-node_modules-${{ steps.detect-package-manager.outputs.package-manager }}-${{
          steps.setup-node.outputs.node-version }}-${{ hashFiles(format('{0}/{1}', inputs.working-directory,
          steps.detect-package-manager.outputs.lockfile-path)) }}

    - name: Install dependencies with pnpm
      if: steps.detect-package-manager.outputs.package-manager == 'pnpm' && steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "üîß Installing dependencies with pnpm..."
        if [ "$LOCKFILE_EXISTS" = "true" ]; then
          INPUT_INSTALL_OPTIONS="--frozen-lockfile $INPUT_INSTALL_OPTIONS"
        else
          echo "‚ö†Ô∏è  Warning: No lockfile found, not using --frozen-lockfile"
        fi
        if ! pnpm i $INPUT_INSTALL_OPTIONS; then
          echo "‚ùå ERROR: pnpm install failed"
          exit 1
        fi
        echo "‚úÖ pnpm install completed successfully"
      env:
        INPUT_INSTALL_OPTIONS: ${{ inputs.install-options }}
        LOCKFILE_EXISTS: ${{ steps.detect-package-manager.outputs.lockfile-exists }}

    - name: Install dependencies with yarn
      if: steps.detect-package-manager.outputs.package-manager == 'yarn' && steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "üîß Installing dependencies with yarn..."
        if [ "$LOCKFILE_EXISTS" = "true" ]; then
          INPUT_INSTALL_OPTIONS="--frozen-lockfile $INPUT_INSTALL_OPTIONS"
        else
          echo "‚ö†Ô∏è  Warning: No lockfile found, results may vary"
        fi
        if ! yarn install $INPUT_INSTALL_OPTIONS; then
          echo "‚ùå ERROR: yarn install failed"
          exit 1
        fi
        echo "‚úÖ yarn install completed successfully"
      env:
        INPUT_INSTALL_OPTIONS: ${{ inputs.install-options }}
        LOCKFILE_EXISTS: ${{ steps.detect-package-manager.outputs.lockfile-exists }}

    - name: Install dependencies with npm
      if: steps.detect-package-manager.outputs.package-manager == 'npm' && steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        NPM_CMD=""
        if [ "$LOCKFILE_EXISTS" = "true" ]; then
          NPM_CMD="ci"
        else
          echo "‚ö†Ô∏è  Warning: No lockfile found, versions may vary"
          NPM_CMD="install"
        fi
        echo "üîß Installing dependencies with npm $NPM_CMD..."
        if ! npm $NPM_CMD --no-save --prefer-offline --no-audit $INPUT_INSTALL_OPTIONS; then
          echo "‚ùå ERROR: npm $NPM_CMD failed"
          exit 1
        fi
        echo "‚úÖ npm $NPM_CMD completed successfully"
      env:
        INPUT_INSTALL_OPTIONS: ${{ inputs.install-options }}
        LOCKFILE_EXISTS: ${{ steps.detect-package-manager.outputs.lockfile-exists }}
