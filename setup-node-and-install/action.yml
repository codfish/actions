name: setup-node-and-install

description:
  Sets up Node.js environment and installs dependencies with automatic package manager detection (npm/pnpm/yarn),
  intelligent caching, and .nvmrc/.node-version support

inputs:
  node-version:
    description: Node.js version to install (e.g. '24', 'lts/*'). Defaults to .nvmrc or .node-version file if present
    required: false
  cache-key-suffix:
    description: Additional suffix for cache key to enable multiple caches per workflow
    default: ''
  install-options:
    description: Extra command-line options to pass to npm/pnpm/yarn install
    default: ''
  working-directory:
    description: Directory containing package.json and lockfile
    default: .

outputs: {}

runs:
  using: composite

  steps:
    - name: Validate inputs and detect package manager
      id: setup
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        # Validate working directory exists
        if [ ! -d "." ]; then
          echo "‚ùå ERROR: Working directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        # Validate package.json exists
        if [ ! -f "./package.json" ]; then
          echo "‚ùå ERROR: package.json not found in '${{ inputs.working-directory }}'"
          echo "Make sure the working-directory contains a valid Node.js project"
          exit 1
        fi

        # Validate package.json is valid JSON
        if ! jq empty package.json 2>/dev/null; then
          echo "‚ùå ERROR: package.json is not valid JSON"
          exit 1
        fi

        # Check Node version requirements (.nvmrc, .node-version, or input)
        if [[ ! -f "./.nvmrc" && ! -f "./.node-version" && -z "$INPUT_NODE_VERSION" ]]; then
          echo "node-version-missing=true" >> $GITHUB_OUTPUT
          exit
        fi

        # Validate .nvmrc format if it exists
        if [ -f "./.nvmrc" ]; then
          nvmrc_version=$(cat .nvmrc | tr -d '\n\r' | xargs)
          if [ -z "$nvmrc_version" ]; then
            echo "‚ùå ERROR: .nvmrc file is empty"
            exit 1
          fi
          echo "üìã Found .nvmrc with Node version: $nvmrc_version"
        fi

        # Validate .node-version format if it exists (and no .nvmrc)
        if [ -f "./.node-version" ] && [ ! -f "./.nvmrc" ]; then
          node_version_file=$(cat .node-version | tr -d '\n\r' | xargs)
          if [ -z "$node_version_file" ]; then
            echo "‚ùå ERROR: .node-version file is empty"
            exit 1
          fi
          echo "üìã Found .node-version with Node version: $node_version_file"
        fi

        # Show priority info if both files exist
        if [ -f "./.nvmrc" ] && [ -f "./.node-version" ]; then
          echo "üìã Both .nvmrc and .node-version found, .nvmrc takes priority"
        fi

        # Validate node-version input format if provided
        if [ -n "$INPUT_NODE_VERSION" ]; then
          echo "üìã Using Node version from input: $INPUT_NODE_VERSION"
        fi

        # Detect package manager based on lockfiles (including yarn)
        if [ -f "./pnpm-lock.yaml" ]; then
          echo "package-manager=pnpm" >> $GITHUB_OUTPUT
          echo "lockfile-exists=true" >> $GITHUB_OUTPUT
          echo "lockfile-path=pnpm-lock.yaml" >> $GITHUB_OUTPUT
          echo "üì¶ Detected package manager: pnpm"
        elif [ -f "./yarn.lock" ]; then
          echo "package-manager=yarn" >> $GITHUB_OUTPUT
          echo "lockfile-exists=true" >> $GITHUB_OUTPUT
          echo "lockfile-path=yarn.lock" >> $GITHUB_OUTPUT
          echo "üì¶ Detected package manager: yarn"
        elif [ -f "./package-lock.json" ]; then
          echo "package-manager=npm" >> $GITHUB_OUTPUT
          echo "lockfile-exists=true" >> $GITHUB_OUTPUT
          echo "lockfile-path=package-lock.json" >> $GITHUB_OUTPUT
          echo "üì¶ Detected package manager: npm"
        else
          echo "package-manager=npm" >> $GITHUB_OUTPUT
          echo "lockfile-exists=false" >> $GITHUB_OUTPUT
          echo "lockfile-path=" >> $GITHUB_OUTPUT
          echo "üì¶ No lockfile found, defaulting to: npm"
        fi
      env:
        INPUT_NODE_VERSION: ${{ inputs.node-version }}

    - if: steps.setup.outputs.node-version-missing == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          core.setFailed('You need to create an .nvmrc file, .node-version file, or pass a value in the `node-version` input.')

    - name: Install pnpm
      if: steps.setup.outputs.package-manager == 'pnpm'
      uses: pnpm/action-setup@v4
      with:
        run_install: false

    - name: Setup node with .nvmrc
      if: ${{ inputs.node-version != '' || hashFiles(format('{0}/.nvmrc', inputs.working-directory)) != '' }}
      uses: actions/setup-node@v5
      id: setup-node
      with:
        # use detected package manager cache if a lockfile is present
        cache: ${{ steps.setup.outputs.lockfile-exists == 'true' && steps.setup.outputs.package-manager || '' }}
        # supplying a node-version input will override the .nvmrc file and give a warning, but that's to be expected.
        cache-dependency-path: ${{ inputs.working-directory }}
        node-version: ${{ inputs.node-version }}
        node-version-file: '${{ inputs.working-directory }}/.nvmrc'
        registry-url: 'https://registry.npmjs.org'

    - name: Read .node-version file
      if:
        ${{ inputs.node-version == '' && hashFiles(format('{0}/.nvmrc', inputs.working-directory)) == '' &&
        hashFiles(format('{0}/.node-version', inputs.working-directory)) != '' }}
      id: read-node-version
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        node_version=$(cat .node-version | tr -d '\n\r' | xargs)
        echo "node-version=$node_version" >> $GITHUB_OUTPUT
        echo "üìã Read Node version from .node-version: $node_version"

    - name: Setup node with .node-version
      if:
        ${{ inputs.node-version == '' && hashFiles(format('{0}/.nvmrc', inputs.working-directory)) == '' &&
        hashFiles(format('{0}/.node-version', inputs.working-directory)) != '' }}
      uses: actions/setup-node@v5
      id: setup-node-alt
      with:
        # use detected package manager cache if a lockfile is present
        cache: ${{ steps.setup.outputs.lockfile-exists == 'true' && steps.setup.outputs.package-manager || '' }}
        cache-dependency-path: ${{ inputs.working-directory }}
        node-version: ${{ steps.read-node-version.outputs.node-version }}
        registry-url: 'https://registry.npmjs.org'

    # Install dependencies with pnpm
    - name: Install dependencies with pnpm
      if: steps.setup.outputs.package-manager == 'pnpm'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "üîß Installing dependencies with pnpm..."
        if ! pnpm install $INPUT_INSTALL_OPTIONS; then
          echo "‚ùå ERROR: pnpm install failed"
          exit 1
        fi
        echo "‚úÖ pnpm install completed successfully"
      env:
        INPUT_INSTALL_OPTIONS: ${{ inputs.install-options }}

    # Install dependencies with yarn
    - name: Install dependencies with yarn
      if: steps.setup.outputs.package-manager == 'yarn'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "üîß Installing dependencies with yarn..."
        if ! yarn install --frozen-lockfile $INPUT_INSTALL_OPTIONS; then
          echo "‚ùå ERROR: yarn install failed"
          exit 1
        fi
        echo "‚úÖ yarn install completed successfully"
      env:
        INPUT_INSTALL_OPTIONS: ${{ inputs.install-options }}

    # Install dependencies with npm (with lockfile)
    - name: Install dependencies with npm (with lockfile)
      if: steps.setup.outputs.lockfile-exists == 'true' && steps.setup.outputs.package-manager == 'npm'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "üîß Installing dependencies with npm ci..."
        if ! npm ci --prefer-offline --no-audit $INPUT_INSTALL_OPTIONS; then
          echo "‚ùå ERROR: npm ci failed"
          exit 1
        fi
        echo "‚úÖ npm ci completed successfully"
      env:
        INPUT_INSTALL_OPTIONS: ${{ inputs.install-options }}

    - name: Install dependencies with npm (without lockfile)
      if: steps.setup.outputs.lockfile-exists == 'false' && steps.setup.outputs.package-manager == 'npm'
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "üîß Installing dependencies with npm install..."
        echo "‚ö†Ô∏è  Warning: No lockfile found, versions may vary"
        if ! npm install --no-save --prefer-offline --no-audit $INPUT_INSTALL_OPTIONS; then
          echo "‚ùå ERROR: npm install failed"
          exit 1
        fi
        echo "‚úÖ npm install completed successfully"
      env:
        INPUT_INSTALL_OPTIONS: ${{ inputs.install-options }}
