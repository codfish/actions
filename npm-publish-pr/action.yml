name: npm-pr-version

description:
  Publishes package with PR-specific version (0.0.0-PR-123--abc1234) using detected package manager (npm/yarn/pnpm) and
  automatically comments on PR

inputs:
  npm-token:
    required: true
    description: Registry authentication token with publish permissions (works with npm/yarn/pnpm)
  github-token:
    required: true
    description: GitHub token with pull request comment permissions (typically secrets.GITHUB_TOKEN)
  comment:
    required: false
    default: 'true'
    description: Whether to comment on the PR with the published version (true/false)
  comment-tag:
    required: false
    default: npm-publish-pr
    description: Tag to use for PR comments (for comment identification and updates)

outputs:
  version:
    description: Generated PR-specific version number (0.0.0-PR-{number}--{short-sha})
    value: '${{ steps.publish.outputs.version }}'
  package-name:
    description: Package name from package.json
    value: '${{ steps.publish.outputs.package-name }}'
  error-message:
    description: Error message if publish fails
    value: '${{ steps.publish.outputs.error-message }}'

runs:
  using: composite

  steps:
    - uses: codfish/actions/comment@v2
      if: inputs.comment == 'true'
      with:
        message: ⏳ Publishing PR version...
        upsert: true
        tag: ${{ inputs.comment-tag }}

    - name: Validate and publish to registry
      id: publish
      shell: bash
      run: |
        set +e  # Don't exit on error so we can handle failures

        # Initialize outputs for error handling
        error_message=""
        package_name=""
        version=""

        # Function to sanitize error messages for GitHub output
        sanitize_error() {
          local message="$1"
          # Replace newlines with spaces, remove extra whitespace, truncate if too long
          echo "$message" | tr '\n' ' ' | tr -s ' ' | cut -c1-500
        }

        # Validate package.json exists
        if [ ! -f "package.json" ]; then
          error_message="❌ ERROR: package.json not found in current directory. Make sure you're running this action in a directory with a package.json file"
          echo "$error_message"
          echo "error-message=$(sanitize_error "$error_message")" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Validate package.json is valid JSON
        if ! jq empty package.json 2>/dev/null; then
          error_message="❌ ERROR: package.json is not valid JSON"
          echo "$error_message"
          echo "error-message=$(sanitize_error "$error_message")" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Check if package has a name
        package_name=$(jq -r '.name // empty' package.json)
        if [ -z "$package_name" ] || [ "$package_name" = "null" ]; then
          error_message="❌ ERROR: package.json must have a 'name' field"
          echo "$error_message"
          echo "error-message=$(sanitize_error "$error_message")" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Output package name for use in error handling
        echo "package-name=$package_name" >> $GITHUB_OUTPUT

        # Detect package manager
        if [ -f "./yarn.lock" ]; then
          package_manager="yarn"
          echo "📦 Detected package manager: yarn"
        elif [ -f "./pnpm-lock.yaml" ]; then
          package_manager="pnpm"
          echo "📦 Detected package manager: pnpm"
        else
          package_manager="npm"
          echo "📦 Detected package manager: npm"
        fi

        # Generate version
        version="0.0.0-PR-${PR}--$(echo ${SHA} | cut -c -7)"
        echo "📦 Publishing $package_name@$version with $package_manager"
        echo "version=$version" >> $GITHUB_OUTPUT

        # Update package.json version (all package managers support npm version)
        version_output=$(npm version $version --no-git-tag-version 2>&1)
        version_exit_code=$?
        if [ $version_exit_code -ne 0 ]; then
          error_message="❌ ERROR: Failed to update package version. Check if the version format is valid. Error: $version_output"
          echo "$error_message"
          echo "error-message=$(sanitize_error "$error_message")" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Publish package based on detected package manager
        case "$package_manager" in
          "yarn")
            publish_output=$(yarn publish --access public --tag pr --new-version $version --no-git-tag-version --skip-check-working-tree 2>&1)
            publish_exit_code=$?
            if [ $publish_exit_code -ne 0 ]; then
              error_message="❌ ERROR: Failed to publish package with yarn. Error: $publish_output"
              echo "$error_message"
              echo "error-message=$(sanitize_error "$error_message")" >> $GITHUB_OUTPUT
              exit 1
            fi
            ;;
          "pnpm")
            publish_output=$(pnpm publish --no-git-checks --access public --tag pr 2>&1)
            publish_exit_code=$?
            if [ $publish_exit_code -ne 0 ]; then
              error_message="❌ ERROR: Failed to publish package with pnpm. Error: $publish_output"
              echo "$error_message"
              echo "error-message=$(sanitize_error "$error_message")" >> $GITHUB_OUTPUT
              exit 1
            fi
            ;;
          *)
            publish_output=$(npm publish --access public --tag pr 2>&1)
            publish_exit_code=$?
            if [ $publish_exit_code -ne 0 ]; then
              error_message="❌ ERROR: Failed to publish package with npm. Error: $publish_output"
              echo "$error_message"
              echo "error-message=$(sanitize_error "$error_message")" >> $GITHUB_OUTPUT
              exit 1
            fi
            ;;
        esac

        echo "✅ Successfully published $package_name@$version using $package_manager"
      env:
        NODE_AUTH_TOKEN: ${{ inputs.npm-token }}
        PR: ${{ github.event.number }}
        SHA: ${{ github.event.pull_request.head.sha }}

    - uses: codfish/actions/comment@v2
      if: failure() && inputs.comment == 'true'
      with:
        message: |
          ❌ **PR package publish failed!**

          Error: ${{ steps.publish.outputs.error-message }}

          📋 [View workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
        upsert: true
        tag: ${{ inputs.comment-tag }}

    - uses: codfish/actions/comment@v2
      if: success() && inputs.comment == 'true'
      with:
        message: |
          ✅ **PR package published successfully!**

          Install with: <code>npm install ${{ steps.publish.outputs.package-name }}@${{ steps.publish.outputs.version }}</code>
        upsert: true
        tag: ${{ inputs.comment-tag }}
